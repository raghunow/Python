# Mini-project #6 - Blackjack

import simplegui
import random

# load card sprite - 936x384 - source: jfitz.com
CARD_SIZE = (72, 96)
CARD_CENTER = (36, 48)
card_images = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/cards_jfitz.png")

CARD_BACK_SIZE = (72, 96)
CARD_BACK_CENTER = (36, 48)
card_back = simplegui.load_image("http://storage.googleapis.com/codeskulptor-assets/card_jfitz_back.png")    

# initialize some useful global variables
in_play = False
outcome = ""
score = 0


# define globals for cards
SUITS = ('C', 'S', 'H', 'D')
RANKS = ('A', '2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K')
VALUES = {'A':1, '2':2, '3':3, '4':4, '5':5, '6':6, '7':7, '8':8, '9':9, 'T':10, 'J':10, 'Q':10, 'K':10}


# define card class
class Card:
    def __init__(self, suit, rank):
        if (suit in SUITS) and (rank in RANKS):
            self.suit = suit
            self.rank = rank
        else:
            self.suit = None
            self.rank = None
            print "Invalid card: ", suit, rank

    def __str__(self):
        return self.suit + self.rank

    def get_suit(self):
        return self.suit

    def get_rank(self):
        return self.rank

    def draw(self, canvas, pos):
        card_loc = (CARD_CENTER[0] + CARD_SIZE[0] * RANKS.index(self.rank), 
                    CARD_CENTER[1] + CARD_SIZE[1] * SUITS.index(self.suit))
        canvas.draw_image(card_images, card_loc, CARD_SIZE, [pos[0] + CARD_CENTER[0], pos[1] + CARD_CENTER[1]], CARD_SIZE)
        
class Hand:
    def __init__(self):
        self.cardlist = []	# create Hand object

    def __str__(self):
        # return a string representation of a hand
        a =[]
        for i in self.cardlist:
            a.append((i.suit,i.rank))
        return str(a)
               
    def add_card(self, card):
        self.cardlist.append(card)	# add a card object to a hand

    def get_value(self):
        global VALUES
        self.value=0
        self.AcePresent = 0
        # count aces as 1, if the hand has an ace, then add 10 to hand value if it doesn't bust
        # compute the value of the hand, see Blackjack video
        for i in self.cardlist:
            self.value += VALUES[i.get_rank()]
            if VALUES[i.get_rank()] == 1:
                self.AcePresent = 1
        if self.AcePresent == 1 and self.value < 12:
            self.value += 10
        return self.value        
           
    def draw(self, canvas, pos):
        #draw a hand on the canvas, use the draw method for cards
        j = 0
        for i in self.cardlist:
            i.draw(canvas,[j*100,pos[1]])
            j = j + 1
                    
class Deck:
    def __init__(self):
        # create a Deck object
        self.deckobject =[]
        for i in SUITS:
            for j in RANKS:
                x = Card(i,j)
                self.deckobject.append(x)
        
    def shuffle(self):
        random.shuffle(self.deckobject)
        
    def deal_card(self):
        # deal a card object from the deck
        return self.deckobject.pop(0)
        
    def __str__(self):
        self.a = []
        for i in self.deckobject:
            self.a.append(str(i.get_suit())+str(i.get_rank()))
        return str(self.a)

def deal():
    global outcome, in_play, deck, PlayerHand, DealerHand,score
    outcome = ""
    if in_play == True:
        outcome = "Player has aborted the game"
        score += -1
    deck = Deck()
    PlayerHand = Hand()
    DealerHand = Hand()
    deck.shuffle()
    PlayerHand.add_card(deck.deal_card())
    PlayerHand.add_card(deck.deal_card())
    DealerHand.add_card(deck.deal_card())
    DealerHand.add_card(deck.deal_card())
    in_play = True

def hit():
    # if the hand is in play, hit the player
    # if busted, assign a message to outcome, update in_play and score
    global PlayerHand, outcome, in_play, score
    if in_play == True:
        if PlayerHand.get_value() <= 21:
            PlayerHand.add_card(deck.deal_card())
            outcome = "Player's count is "  + str(PlayerHand.get_value())

        if PlayerHand.get_value() > 21:
            outcome = "Player is busted!"
            in_play = False
            score += -1

        
       
def stand():
    global outcome, in_play, score
    if PlayerHand.get_value() > 21:
        outcome = "Player has already lost"
        in_play = False
    elif in_play == True:
        outcome = "Player has chosen to stand with a score of " + str(PlayerHand.get_value) 
        while (DealerHand.get_value() < 17): 
            DealerHand.add_card(deck.deal_card())
            outcome = "Dealer's count is " + str(DealerHand.get_value())
        if DealerHand.get_value() > 21:
            outcome = "Player wins!"
            in_play = False
            score += 1
        else :
            if DealerHand.get_value() >= PlayerHand.get_value():
                outcome  = " Dealer wins!"
                score += -1
                in_play = False
            else:
                outcome = " Player wins!"
                in_play = False
                score += 1
            
 
def draw(canvas):
    global outcome,card_back, CARD_BACK_CENTER, CARD_BACK_SIZE, score
    PlayerHand.draw(canvas,[10,80])
    DealerHand.draw(canvas,[10,430])
    canvas.draw_text('BLACK JACK', (200, 40), 30, 'Red')
    canvas.draw_text('Player Hand',(200,210), 30, 'Red')
    canvas.draw_text('Dealer Hand',(200,550), 30, 'Red')
    canvas.draw_text(outcome, (150, 300),30, 'Yellow')
    canvas.draw_text("Score : " + str(score), (400, 50),30, 'Yellow')
    if in_play == True:
        canvas.draw_text('Hit or Stand?', (200, 350), 30, 'Yellow')
        canvas.draw_image(card_back, CARD_BACK_CENTER, CARD_SIZE, [35,480], CARD_SIZE)
    else:
        canvas.draw_text('New Deal?', (200, 350), 30, 'Yellow')
        

# initialization frame
frame = simplegui.create_frame("Blackjack", 600, 600)
frame.set_canvas_background("Green")

#create buttons and canvas callback
frame.add_button("Deal", deal, 200)
frame.add_button("Hit",  hit, 200)
frame.add_button("Stand", stand, 200)
frame.set_draw_handler(draw)


# get things rolling
deal()
frame.start()


# remember to review the gradic rubric
